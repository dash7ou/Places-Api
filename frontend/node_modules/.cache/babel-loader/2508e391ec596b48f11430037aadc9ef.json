{"ast":null,"code":"var _jsxFileName = \"/home/error/Desktop/React-Projects/place-api/frontend/src/user/pages/Auth.js\";\nimport React, { useState, useContext } from \"react\";\nimport Card from \"../../shared/components/UIElements/Card\";\nimport Input from \"../../shared/components/FormElements/Input\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport { useFrom } from \"../../shared/hooks/form-hook\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport { VALIDATOR_EMAIL, VALIDATOR_MINLENGTH, VALIDATOR_REQUIRE } from \"../../shared/utils/validators\";\nimport \"./Auth.css\";\n\nconst Auth = () => {\n  const {\n    login\n  } = useContext(AuthContext);\n  const [isLoginMode, setIsLoginMode] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [formState, inputHandler, setDateForm] = useFrom({\n    email: {\n      value: \"\",\n      isValid: false\n    },\n    password: {\n      value: \"\",\n      isValid: false\n    }\n  }, false);\n\n  const onSwitchHandler = () => {\n    if (!isLoginMode) {\n      setDateForm({ ...formState.inputs,\n        name: undefined\n      }, formState.inputs.email.isValid && formState.inputs.password.isValid);\n    } else {\n      setDateForm({ ...formState.inputs,\n        name: {\n          value: \"\",\n          isValid: false\n        }\n      }, false);\n    }\n\n    setIsLoginMode(prevMode => !prevMode);\n  };\n\n  const onSubmitForm = async event => {\n    event.preventDefault();\n\n    if (isLoginMode) {} else {\n      try {\n        setIsLoading(true);\n        const response = await fetch(\"http://localhost:5000/api/v1/users/signup\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            name: formState.inputs.name.value,\n            email: formState.inputs.email.value,\n            password: formState.inputs.password.value\n          })\n        });\n        const data = await response.json();\n        setIsLoading(false);\n        console.log(data); // login()\n      } catch (err) {\n        setError(err.message || 'Something went wrong, please try again.');\n        setIsLoading(false);\n      }\n    }\n  };\n\n  return React.createElement(Card, {\n    className: \"authentication\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, isLoading && React.createElement(LoadingSpinner, {\n    asOverlay: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }), React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, \"Login Required\"), React.createElement(\"hr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }), React.createElement(\"form\", {\n    onSubmit: onSubmitForm,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, !isLoginMode && React.createElement(Input, {\n    element: \"input\",\n    id: \"name\",\n    type: \"text\",\n    label: \"Name\",\n    validators: [VALIDATOR_REQUIRE()],\n    errorText: \"Please enter a valid name\",\n    onInput: inputHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }), React.createElement(Input, {\n    id: \"email\",\n    element: \"input\",\n    type: \"email\",\n    label: \"E-mail\",\n    validators: [VALIDATOR_EMAIL()],\n    errorText: \"Please enter a valid email address.\",\n    onInput: inputHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }), React.createElement(Input, {\n    id: \"password\",\n    element: \"input\",\n    type: \"password\",\n    label: \"Password\",\n    validators: [VALIDATOR_MINLENGTH(5)],\n    errorText: \"Please enter a valid password at least 5 characters.\",\n    onInput: inputHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }), React.createElement(Button, {\n    type: \"submit\",\n    disabled: !formState.isValid,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, isLoginMode ? \"Login\" : \"SignUp\"), React.createElement(Button, {\n    inverse: true,\n    onClick: onSwitchHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, \"Switch To \", isLoginMode ? \"Login\" : \"SignUp\")));\n};\n\nexport default Auth;","map":{"version":3,"sources":["/home/error/Desktop/React-Projects/place-api/frontend/src/user/pages/Auth.js"],"names":["React","useState","useContext","Card","Input","Button","useFrom","AuthContext","ErrorModal","LoadingSpinner","VALIDATOR_EMAIL","VALIDATOR_MINLENGTH","VALIDATOR_REQUIRE","Auth","login","isLoginMode","setIsLoginMode","isLoading","setIsLoading","error","setError","formState","inputHandler","setDateForm","email","value","isValid","password","onSwitchHandler","inputs","name","undefined","prevMode","onSubmitForm","event","preventDefault","response","fetch","method","headers","body","JSON","stringify","data","json","console","log","err","message"],"mappings":"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","sourcesContent":["import React, {useState, useContext} from \"react\";\n\nimport Card from \"../../shared/components/UIElements/Card\";\nimport Input from \"../../shared/components/FormElements/Input\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport { useFrom } from \"../../shared/hooks/form-hook\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport {\n    VALIDATOR_EMAIL,\n    VALIDATOR_MINLENGTH,\n    VALIDATOR_REQUIRE\n} from \"../../shared/utils/validators\";\n\nimport \"./Auth.css\"\n\nconst Auth = ()=>{\n    const { login } = useContext(AuthContext);\n    const [ isLoginMode, setIsLoginMode ] = useState(true);\n    const [ isLoading, setIsLoading ] = useState(false);\n    const [ error , setError ] = useState(null);\n\n    const [ formState , inputHandler, setDateForm ] = useFrom({\n        email: {\n            value: \"\",\n            isValid: false,\n        },\n        password: {\n            value: \"\",\n            isValid: false\n        }\n    }, false);\n\n    const onSwitchHandler = ()=>{\n        if(!isLoginMode){\n            setDateForm({\n                ...formState.inputs,\n                name: undefined\n            }, formState.inputs.email.isValid && formState.inputs.password.isValid)\n        }else{\n            setDateForm({\n                ...formState.inputs,\n                name: {\n                    value: \"\",\n                    isValid: false\n                }\n            }, false)\n        }\n        setIsLoginMode(prevMode => !prevMode)\n    }\n\n    const onSubmitForm = async (event)=>{\n        event.preventDefault();\n        if(isLoginMode){\n\n        }else{\n            try{\n                setIsLoading(true);\n                const response = await fetch(\"http://localhost:5000/api/v1/users/signup\", {\n                    method: \"POST\",\n                    headers:{\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify({\n                        name: formState.inputs.name.value,\n                        email: formState.inputs.email.value,\n                        password: formState.inputs.password.value\n                    })\n                })\n                const data = await response.json();\n                setIsLoading(false)\n                console.log(data)\n                // login()\n            }catch(err){\n                setError(err.message || 'Something went wrong, please try again.');\n                setIsLoading(false)\n            }\n\n        }\n    }\n    return (\n        <Card className=\"authentication\">\n            {isLoading && <LoadingSpinner asOverlay/>}\n            <h2>Login Required</h2>\n            <hr/>\n            <form onSubmit={onSubmitForm}>\n                {\n                    !isLoginMode && <Input \n                        element=\"input\"\n                        id=\"name\"\n                        type=\"text\"\n                        label=\"Name\"\n                        validators={[VALIDATOR_REQUIRE()]}\n                        errorText=\"Please enter a valid name\"\n                        onInput={inputHandler}\n                    />\n                }\n                <Input \n                    id=\"email\"\n                    element=\"input\"\n                    type=\"email\"\n                    label=\"E-mail\"\n                    validators={[VALIDATOR_EMAIL()]}\n                    errorText=\"Please enter a valid email address.\"\n                    onInput={inputHandler}\n                />\n                <Input \n                    id=\"password\"\n                    element=\"input\"\n                    type=\"password\"\n                    label=\"Password\"\n                    validators={[VALIDATOR_MINLENGTH(5)]}\n                    errorText=\"Please enter a valid password at least 5 characters.\"\n                    onInput={inputHandler}\n                />\n                <Button type=\"submit\" disabled={!formState.isValid}>{ isLoginMode ? \"Login\" : \"SignUp\" }</Button>\n                <Button inverse onClick={onSwitchHandler}>Switch To { isLoginMode ? \"Login\" : \"SignUp\" }</Button>\n            </form>\n        </Card>\n    )\n}\n\n\nexport default Auth;"]},"metadata":{},"sourceType":"module"}