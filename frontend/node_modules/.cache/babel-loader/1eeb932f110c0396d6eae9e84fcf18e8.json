{"ast":null,"code":"import { useState, useCallback, useRef, useEffect } from \"react\";\nexport const useHttpClient = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const activeHttpRequests = useRef([]);\n  const sendRequest = useCallback(async (url, method = 'GET', body = null, headers = {}) => {\n    try {\n      setIsLoading(true);\n      const httpAbortCtrl = new AbortController();\n      activeHttpRequests.current.push(httpAbortCtrl);\n      const response = await fetch(url, {\n        method,\n        body,\n        headers,\n        signal: httpAbortCtrl.signal\n      });\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.message);\n      }\n\n      setIsLoading(false);\n      return data;\n    } catch (error) {\n      setError(error.message);\n      setIsLoading(false);\n    }\n  }, []);\n\n  const clearError = () => {\n    setError(null);\n  };\n\n  useEffect(() => {\n    return () => {\n      activeHttpRequests.current.forEach(abortCtrl => abortCtrl.abort());\n    };\n  }, []);\n  return [isLoading, error, sendRequest, clearError];\n};","map":{"version":3,"sources":["/home/error/Desktop/React-Projects/place-api/frontend/src/shared/hooks/http-hook.js"],"names":["useState","useCallback","useRef","useEffect","useHttpClient","isLoading","setIsLoading","error","setError","activeHttpRequests","sendRequest","url","method","body","headers","httpAbortCtrl","AbortController","current","push","response","fetch","signal","data","json","ok","Error","message","clearError","forEach","abortCtrl","abort"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,WAAnB,EAAgCC,MAAhC,EAAwCC,SAAxC,QAAyD,OAAzD;AAEA,OAAO,MAAMC,aAAa,GAAG,MAAI;AAC7B,QAAM,CAAEC,SAAF,EAAcC,YAAd,IAA+BN,QAAQ,CAAC,KAAD,CAA7C;AACA,QAAM,CAAEO,KAAF,EAAUC,QAAV,IAAsBR,QAAQ,CAAC,IAAD,CAApC;AAEA,QAAMS,kBAAkB,GAAGP,MAAM,CAAC,EAAD,CAAjC;AAEA,QAAMQ,WAAW,GAAGT,WAAW,CAC3B,OAAOU,GAAP,EAAaC,MAAM,GAAC,KAApB,EAA2BC,IAAI,GAAC,IAAhC,EAAsCC,OAAO,GAAC,EAA9C,KAAmD;AAC/C,QAAI;AACAR,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,YAAMS,aAAa,GAAG,IAAIC,eAAJ,EAAtB;AACAP,MAAAA,kBAAkB,CAACQ,OAAnB,CAA2BC,IAA3B,CAAgCH,aAAhC;AAEA,YAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACT,GAAD,EAAM;AAC9BC,QAAAA,MAD8B;AAE9BC,QAAAA,IAF8B;AAG9BC,QAAAA,OAH8B;AAI9BO,QAAAA,MAAM,EAAEN,aAAa,CAACM;AAJQ,OAAN,CAA5B;AAOA,YAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAAnB;;AACA,UAAG,CAACJ,QAAQ,CAACK,EAAb,EAAgB;AACZ,cAAM,IAAIC,KAAJ,CAAUH,IAAI,CAACI,OAAf,CAAN;AACH;;AACDpB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,aAAOgB,IAAP;AACH,KAlBD,CAkBE,OAAOf,KAAP,EAAc;AACZC,MAAAA,QAAQ,CAACD,KAAK,CAACmB,OAAP,CAAR;AACApB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACH;AAEJ,GAzB0B,EAyBzB,EAzByB,CAA/B;;AA4BA,QAAMqB,UAAU,GAAG,MAAI;AACnBnB,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACH,GAFD;;AAIAL,EAAAA,SAAS,CAAC,MAAI;AACV,WAAO,MAAI;AACPM,MAAAA,kBAAkB,CAACQ,OAAnB,CAA2BW,OAA3B,CAAmCC,SAAS,IAAIA,SAAS,CAACC,KAAV,EAAhD;AACH,KAFD;AAGH,GAJQ,EAIN,EAJM,CAAT;AAMA,SAAO,CAAEzB,SAAF,EAAaE,KAAb,EAAoBG,WAApB,EAAiCiB,UAAjC,CAAP;AACH,CA7CM","sourcesContent":["import { useState, useCallback, useRef, useEffect } from \"react\";\n\nexport const useHttpClient = ()=>{\n    const [ isLoading , setIsLoading ] = useState(false);\n    const [ error , setError ]= useState(null);\n\n    const activeHttpRequests = useRef([]);\n\n    const sendRequest = useCallback( \n        async (url , method='GET', body=null, headers={})=>{\n            try {\n                setIsLoading(true);\n                const httpAbortCtrl = new AbortController();\n                activeHttpRequests.current.push(httpAbortCtrl);\n\n                const response = await fetch(url, {\n                    method,\n                    body,\n                    headers,\n                    signal: httpAbortCtrl.signal\n                });\n        \n                const data = await response.json();\n                if(!response.ok){\n                    throw new Error(data.message);\n                }\n                setIsLoading(false);\n                return data\n            } catch (error) {\n                setError(error.message);\n                setIsLoading(false)\n            }\n\n        },[]\n    );\n\n    const clearError = ()=>{\n        setError(null);\n    }\n\n    useEffect(()=>{\n        return ()=>{\n            activeHttpRequests.current.forEach(abortCtrl => abortCtrl.abort())\n        }\n    }, [])\n\n    return [ isLoading, error, sendRequest, clearError];\n};\n\n"]},"metadata":{},"sourceType":"module"}