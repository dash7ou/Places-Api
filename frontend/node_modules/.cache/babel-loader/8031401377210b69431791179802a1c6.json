{"ast":null,"code":"var _jsxFileName = \"/home/error/Desktop/React-Projects/place-api/frontend/src/shared/components/FormElements/Input.js\";\nimport React, { useReducer } from \"react\";\nimport { validate } from \"../../utils/validators\";\nimport \"./Input.css\";\n\nconst inputReducer = (state, action) => {\n  switch (action.type) {\n    case \"CHANGE\":\n      return { ...state,\n        value: action.val,\n        isValid: validate(action.val, action.validators)\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst Input = ({\n  id,\n  label,\n  element,\n  type,\n  placeholder,\n  rows,\n  errorText\n}) => {\n  const [inputState, dispatch] = useReducer(inputReducer, {\n    value: \"\",\n    isValid: false\n  });\n\n  const changeHandler = event => {\n    dispatch({\n      type: \"CHANGE\",\n      val: event.target.value\n    });\n  };\n\n  const elementForm = element === \"input\" ? React.createElement(\"input\", {\n    id: id,\n    type: type,\n    placeholder: placeholder,\n    onChange: changeHandler,\n    value: inputState.value,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }) : React.createElement(\"textarea\", {\n    id: id,\n    onChange: changeHandler,\n    rows: rows || 3,\n    value: inputState.value,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  });\n  return React.createElement(\"div\", {\n    className: `form-control ${!inputState.isValid && 'form-control--invalid'}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, label, \" \"), elementForm, !inputState.isValid && React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, errorText));\n};\n\nexport default Input;","map":{"version":3,"sources":["/home/error/Desktop/React-Projects/place-api/frontend/src/shared/components/FormElements/Input.js"],"names":["React","useReducer","validate","inputReducer","state","action","type","value","val","isValid","validators","Input","id","label","element","placeholder","rows","errorText","inputState","dispatch","changeHandler","event","target","elementForm"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AAEA,SAASC,QAAT,QAAyB,wBAAzB;AAEA,OAAO,aAAP;;AAEA,MAAMC,YAAY,GAAG,CAACC,KAAD,EAASC,MAAT,KAAkB;AACnC,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,QAAL;AACI,aAAM,EACF,GAAGF,KADD;AAEFG,QAAAA,KAAK,EAAEF,MAAM,CAACG,GAFZ;AAGFC,QAAAA,OAAO,EAAEP,QAAQ,CAACG,MAAM,CAACG,GAAR,EAAaH,MAAM,CAACK,UAApB;AAHf,OAAN;;AAKJ;AACI,aAAON,KAAP;AARR;AAUH,CAXD;;AAYA,MAAMO,KAAK,GAAG,CAAC;AAAEC,EAAAA,EAAF;AAAOC,EAAAA,KAAP;AAAeC,EAAAA,OAAf;AAAwBR,EAAAA,IAAxB;AAA8BS,EAAAA,WAA9B;AAA4CC,EAAAA,IAA5C;AAAkDC,EAAAA;AAAlD,CAAD,KAAgE;AAC1E,QAAM,CAAEC,UAAF,EAAcC,QAAd,IAA2BlB,UAAU,CAAEE,YAAF,EAAgB;AAACI,IAAAA,KAAK,EAAE,EAAR;AAAYE,IAAAA,OAAO,EAAE;AAArB,GAAhB,CAA3C;;AAEA,QAAMW,aAAa,GAAGC,KAAK,IAAG;AAC1BF,IAAAA,QAAQ,CAAC;AAACb,MAAAA,IAAI,EAAE,QAAP;AAAiBE,MAAAA,GAAG,EAAEa,KAAK,CAACC,MAAN,CAAaf;AAAnC,KAAD,CAAR;AACH,GAFD;;AAGA,QAAMgB,WAAW,GAAGT,OAAO,KAAK,OAAZ,GAChB;AACI,IAAA,EAAE,EAAEF,EADR;AAEI,IAAA,IAAI,EAAEN,IAFV;AAGI,IAAA,WAAW,EAAES,WAHjB;AAII,IAAA,QAAQ,EAAEK,aAJd;AAKI,IAAA,KAAK,EAAEF,UAAU,CAACX,KALtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADgB,GASZ;AACI,IAAA,EAAE,EAAEK,EADR;AAEI,IAAA,QAAQ,EAAEQ,aAFd;AAGI,IAAA,IAAI,EAAIJ,IAAI,IAAI,CAHpB;AAII,IAAA,KAAK,EAAEE,UAAU,CAACX,KAJtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATR;AAgBA,SACI;AAAK,IAAA,SAAS,EAAG,gBAAe,CAACW,UAAU,CAACT,OAAZ,IAAuB,uBAAwB,EAA/E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAO,IAAA,OAAO,EAAEG,EAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsBC,KAAtB,MADJ,EAEKU,WAFL,EAGK,CAACL,UAAU,CAACT,OAAZ,IAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIQ,SAAJ,CAH5B,CADJ;AAOH,CA7BD;;AA+BA,eAAeN,KAAf","sourcesContent":["import React, { useReducer } from \"react\";\n\nimport { validate } from \"../../utils/validators\"\n\nimport \"./Input.css\"\n\nconst inputReducer = (state , action)=>{\n    switch(action.type){\n        case \"CHANGE\":\n            return{\n                ...state,\n                value: action.val,\n                isValid: validate(action.val, action.validators)\n            }\n        default:\n            return state\n    }\n}\nconst Input = ({ id , label , element, type, placeholder , rows, errorText})=>{\n    const [ inputState, dispatch ] = useReducer( inputReducer, {value: \"\", isValid: false});\n\n    const changeHandler = event =>{\n        dispatch({type: \"CHANGE\", val: event.target.value})\n    }\n    const elementForm = element === \"input\" ? (\n        <input \n            id={id} \n            type={type} \n            placeholder={placeholder}\n            onChange={changeHandler}\n            value={inputState.value}\n        />\n        ) : (\n            <textarea\n                id={id}\n                onChange={changeHandler}\n                rows = {rows || 3}\n                value={inputState.value}\n            />\n        )\n    return (\n        <div className={`form-control ${!inputState.isValid && 'form-control--invalid'}`}>\n            <label htmlFor={id}>{ label } </label>\n            {elementForm}\n            {!inputState.isValid && <p>{errorText}</p>}\n        </div>\n    );\n}\n\nexport default Input;"]},"metadata":{},"sourceType":"module"}