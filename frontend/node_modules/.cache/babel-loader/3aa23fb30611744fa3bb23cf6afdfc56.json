{"ast":null,"code":"var _jsxFileName = \"/home/error/Desktop/React-Projects/place-api/frontend/src/shared/components/FormElements/Input.js\";\nimport React, { useReducer, useEffect } from 'react';\nimport { validate } from '../../utils/validators';\nimport './Input.css';\n\nconst inputReducer = (state, action) => {\n  switch (action.type) {\n    case 'CHANGE':\n      return { ...state,\n        value: action.val,\n        isValid: validate(action.val, action.validators)\n      };\n\n    case 'TOUCH':\n      return { ...state,\n        isTouched: true\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst Input = ({\n  id,\n  label,\n  element,\n  type,\n  placeholder,\n  rows,\n  validators,\n  errorText,\n  value: oldValue,\n  valid: oldValid,\n  onInput\n}) => {\n  const [inputState, dispatch] = useReducer(inputReducer, {\n    value: oldValue || '',\n    isValid: oldValid || false,\n    isTouched: false\n  });\n\n  const changeHandler = event => {\n    dispatch({\n      type: 'CHANGE',\n      val: event.target.value,\n      validators\n    });\n  };\n\n  const touchHandler = _ => {\n    dispatch({\n      type: 'TOUCH'\n    });\n  };\n\n  const {\n    value,\n    isValid\n  } = inputState;\n  useEffect(() => {\n    onInput(id, value, isValid);\n  }, [id, value, isValid, onInput]);\n  const elementForm = element === 'input' ? React.createElement(\"input\", {\n    id: id,\n    type: type,\n    placeholder: placeholder,\n    onChange: changeHandler,\n    onBlur: touchHandler,\n    value: inputState.value,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }) : React.createElement(\"textarea\", {\n    id: id,\n    onChange: changeHandler,\n    rows: rows || 3,\n    onBlur: touchHandler,\n    value: inputState.value,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  });\n  return React.createElement(\"div\", {\n    className: `form-control ${!inputState.isValid && inputState.isTouched && 'form-control--invalid'}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, label, \" \"), elementForm, !inputState.isValid && inputState.isTouched && React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, errorText));\n};\n\nexport default Input;","map":{"version":3,"sources":["/home/error/Desktop/React-Projects/place-api/frontend/src/shared/components/FormElements/Input.js"],"names":["React","useReducer","useEffect","validate","inputReducer","state","action","type","value","val","isValid","validators","isTouched","Input","id","label","element","placeholder","rows","errorText","oldValue","valid","oldValid","onInput","inputState","dispatch","changeHandler","event","target","touchHandler","_","elementForm"],"mappings":"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","sourcesContent":["import React, { useReducer, useEffect } from 'react';\n\nimport { validate } from '../../utils/validators';\n\nimport './Input.css';\n\nconst inputReducer = (state, action) => {\n\tswitch (action.type) {\n\t\tcase 'CHANGE':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tvalue: action.val,\n\t\t\t\tisValid: validate(action.val, action.validators)\n\t\t\t};\n\t\tcase 'TOUCH':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisTouched: true\n\t\t\t};\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\nconst Input = ({\n\tid,\n\tlabel,\n\telement,\n\ttype,\n\tplaceholder,\n\trows,\n\tvalidators,\n\terrorText,\n\tvalue: oldValue,\n\tvalid: oldValid,\n\tonInput\n}) => {\n\tconst [ inputState, dispatch ] = useReducer(inputReducer, {\n\t\tvalue: oldValue || '',\n\t\tisValid: oldValid || false,\n\t\tisTouched: false\n\t});\n\n\tconst changeHandler = (event) => {\n\t\tdispatch({ type: 'CHANGE', val: event.target.value, validators });\n\t};\n\n\tconst touchHandler = (_) => {\n\t\tdispatch({\n\t\t\ttype: 'TOUCH'\n\t\t});\n\t};\n\n\tconst { value, isValid } = inputState;\n\tuseEffect(\n\t\t() => {\n\t\t\tonInput(id, value, isValid);\n\t\t},\n\t\t[ id, value, isValid, onInput ]\n\t);\n\n\tconst elementForm =\n\t\telement === 'input' ? (\n\t\t\t<input\n\t\t\t\tid={id}\n\t\t\t\ttype={type}\n\t\t\t\tplaceholder={placeholder}\n\t\t\t\tonChange={changeHandler}\n\t\t\t\tonBlur={touchHandler}\n\t\t\t\tvalue={inputState.value}\n\t\t\t/>\n\t\t) : (\n\t\t\t<textarea\n\t\t\t\tid={id}\n\t\t\t\tonChange={changeHandler}\n\t\t\t\trows={rows || 3}\n\t\t\t\tonBlur={touchHandler}\n\t\t\t\tvalue={inputState.value}\n\t\t\t/>\n\t\t);\n\treturn (\n\t\t<div className={`form-control ${!inputState.isValid && inputState.isTouched && 'form-control--invalid'}`}>\n\t\t\t<label htmlFor={id}>{label} </label>\n\t\t\t{elementForm}\n\t\t\t{!inputState.isValid && inputState.isTouched && <p>{errorText}</p>}\n\t\t</div>\n\t);\n};\n\nexport default Input;\n"]},"metadata":{},"sourceType":"module"}