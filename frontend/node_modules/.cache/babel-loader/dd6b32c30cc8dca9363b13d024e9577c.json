{"ast":null,"code":"var _jsxFileName = \"/home/error/Desktop/React-Projects/place-api/frontend/src/user/pages/User.js\";\nimport React, { useEffect, useState, Fragment } from \"react\";\nimport UserList from \"../components/UserList\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport Spinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\n\nconst User = () => {\n  const [loadingUsers, setLoadingUsers] = useState();\n  const [isLoading, error, sendRequest, clearError] = useHttpClient();\n  useEffect(() => {\n    const fetchUsers = async () => {\n      try {\n        await sendRequest(\"http://localhost:5000/api/v1/users\");\n        setLoadingUsers(data);\n      } catch (err) {}\n    };\n\n    fetchUsers();\n  }, []);\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, React.createElement(ErrorModal, {\n    error: error,\n    onClear: clearError,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }), isLoading && React.createElement(\"div\", {\n    className: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, React.createElement(Spinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  })), !isLoading && loadingUsers && React.createElement(UserList, {\n    items: loadingUsers,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }));\n};\n\nexport default User;","map":{"version":3,"sources":["/home/error/Desktop/React-Projects/place-api/frontend/src/user/pages/User.js"],"names":["React","useEffect","useState","Fragment","UserList","ErrorModal","Spinner","useHttpClient","User","loadingUsers","setLoadingUsers","isLoading","error","sendRequest","clearError","fetchUsers","data","err"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA4BC,QAA5B,EAAsCC,QAAtC,QAAqD,OAArD;AAEA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,UAAP,MAAuB,+CAAvB;AACA,OAAOC,OAAP,MAAoB,mDAApB;AACA,SAASC,aAAT,QAA8B,8BAA9B;;AAEA,MAAMC,IAAI,GAAG,MAAI;AACb,QAAM,CAACC,YAAD,EAAgBC,eAAhB,IAAmCR,QAAQ,EAAjD;AACA,QAAM,CAAES,SAAF,EAAaC,KAAb,EAAoBC,WAApB,EAAiCC,UAAjC,IAA+CP,aAAa,EAAlE;AACAN,EAAAA,SAAS,CAAC,MAAI;AACV,UAAMc,UAAU,GAAG,YAAU;AACzB,UAAG;AACA,cAAMF,WAAW,CAAC,oCAAD,CAAjB;AACCH,QAAAA,eAAe,CAACM,IAAD,CAAf;AACH,OAHD,CAGC,OAAMC,GAAN,EAAU,CAAE;AAChB,KALD;;AAMAF,IAAAA,UAAU;AACb,GARQ,EAQN,EARM,CAAT;AAUA,SACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAEH,KAAnB;AAA0B,IAAA,OAAO,EAAEE,UAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEKH,SAAS,IAAI;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACV,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADU,CAFlB,EAKM,CAACA,SAAD,IAAcF,YAAd,IAA8B,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAEA,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALpC,CADJ;AAUH,CAvBD;;AAyBA,eAAeD,IAAf","sourcesContent":["import React, { useEffect , useState, Fragment} from \"react\";\n\nimport UserList from \"../components/UserList\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\"\nimport Spinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\"\n\nconst User = ()=>{\n    const [loadingUsers , setLoadingUsers] = useState()\n    const [ isLoading, error, sendRequest, clearError] = useHttpClient()\n    useEffect(()=>{\n        const fetchUsers = async ()=>{\n            try{\n               await sendRequest(\"http://localhost:5000/api/v1/users\");\n                setLoadingUsers(data)\n            }catch(err){}\n        }\n        fetchUsers()\n    }, [])\n\n    return(\n        <Fragment>\n            <ErrorModal error={error} onClear={clearError} />\n            {isLoading && <div className=\"center\">\n                <Spinner />\n            </div>}\n            { !isLoading && loadingUsers && <UserList items={loadingUsers}/> }\n\n        </Fragment>\n    )\n}\n\nexport default User;"]},"metadata":{},"sourceType":"module"}