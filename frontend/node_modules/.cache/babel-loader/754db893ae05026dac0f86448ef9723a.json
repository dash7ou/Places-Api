{"ast":null,"code":"import { useCallback, useReducer } from \"react\";\n\nconst formReducer = (state, action) => {\n  switch (action.type) {\n    case 'INPUT_CHANGE':\n      let formIsValid = true;\n\n      for (const inputId in state.inputs) {\n        if (inputId === action.inputId) {\n          formIsValid = formIsValid && action.isValid;\n        } else {\n          formIsValid = formIsValid && state.inputs[inputId].isValid;\n        }\n      }\n\n      return { ...state,\n        inputs: { ...state.inputs,\n          [action.inputId]: {\n            value: action.value,\n            isValid: action.isValid\n          }\n        },\n        isValid: formIsValid\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const useFrom = (initialInputs, initialFormValidity) => {\n  const [formState, dispatch] = useReducer(formReducer, {\n    inputs: initialInputs,\n    isValid: initialFormValidity\n  });\n  const inputHandler = useCallback((id, value, isValid) => {\n    dispatch({\n      type: 'INPUT_CHANGE',\n      value,\n      isValid,\n      inputId: id\n    });\n  }, []);\n  const setFromDate = useCallback((id, inputData, fromValidity) => {\n    dispatch({\n      type: 'SET_DATA',\n      inputs: inputData,\n      formIsValid: fromValidity\n    });\n  }, []);\n  return [formState, inputHandler, setFromDate];\n};","map":{"version":3,"sources":["/home/error/Desktop/React-Projects/place-api/frontend/src/shared/hooks/form-hook.js"],"names":["useCallback","useReducer","formReducer","state","action","type","formIsValid","inputId","inputs","isValid","value","useFrom","initialInputs","initialFormValidity","formState","dispatch","inputHandler","id","setFromDate","inputData","fromValidity"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,UAAtB,QAAwC,OAAxC;;AAEA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACtC,UAAQA,MAAM,CAACC,IAAf;AACC,SAAK,cAAL;AACC,UAAIC,WAAW,GAAG,IAAlB;;AACA,WAAK,MAAMC,OAAX,IAAsBJ,KAAK,CAACK,MAA5B,EAAoC;AACnC,YAAID,OAAO,KAAKH,MAAM,CAACG,OAAvB,EAAgC;AAC/BD,UAAAA,WAAW,GAAGA,WAAW,IAAIF,MAAM,CAACK,OAApC;AACA,SAFD,MAEO;AACNH,UAAAA,WAAW,GAAGA,WAAW,IAAIH,KAAK,CAACK,MAAN,CAAaD,OAAb,EAAsBE,OAAnD;AACA;AACD;;AACD,aAAO,EACN,GAAGN,KADG;AAENK,QAAAA,MAAM,EAAE,EACP,GAAGL,KAAK,CAACK,MADF;AAEP,WAACJ,MAAM,CAACG,OAAR,GAAkB;AAAEG,YAAAA,KAAK,EAAEN,MAAM,CAACM,KAAhB;AAAuBD,YAAAA,OAAO,EAAEL,MAAM,CAACK;AAAvC;AAFX,SAFF;AAMNA,QAAAA,OAAO,EAAEH;AANH,OAAP;;AAQD;AACC,aAAOH,KAAP;AAnBF;AAqBA,CAtBD;;AAwBA,OAAO,MAAMQ,OAAO,GAAG,CAACC,aAAD,EAAgBC,mBAAhB,KAAsC;AACzD,QAAM,CAAEC,SAAF,EAAaC,QAAb,IAA0Bd,UAAU,CAACC,WAAD,EAAc;AAC1DM,IAAAA,MAAM,EAAEI,aADkD;AAE1DH,IAAAA,OAAO,EAAEI;AAFiD,GAAd,CAA1C;AAKA,QAAMG,YAAY,GAAGhB,WAAW,CAAC,CAACiB,EAAD,EAAKP,KAAL,EAAYD,OAAZ,KAAwB;AAC3DM,IAAAA,QAAQ,CAAC;AACRV,MAAAA,IAAI,EAAE,cADE;AAERK,MAAAA,KAFQ;AAGRD,MAAAA,OAHQ;AAIRF,MAAAA,OAAO,EAAEU;AAJD,KAAD,CAAR;AAMG,GAP+B,EAO7B,EAP6B,CAAhC;AASA,QAAMC,WAAW,GAAGlB,WAAW,CAAC,CAACiB,EAAD,EAAKE,SAAL,EAAiBC,YAAjB,KAAiC;AAC7DL,IAAAA,QAAQ,CAAC;AACLV,MAAAA,IAAI,EAAE,UADD;AAELG,MAAAA,MAAM,EAAEW,SAFH;AAGLb,MAAAA,WAAW,EAAEc;AAHR,KAAD,CAAR;AAKH,GAN8B,EAM5B,EAN4B,CAA/B;AAOA,SAAO,CAAEN,SAAF,EAAcE,YAAd,EAA4BE,WAA5B,CAAP;AAEH,CAxBM","sourcesContent":["import { useCallback, useReducer } from \"react\";\n\nconst formReducer = (state, action) => {\n\tswitch (action.type) {\n\t\tcase 'INPUT_CHANGE':\n\t\t\tlet formIsValid = true;\n\t\t\tfor (const inputId in state.inputs) {\n\t\t\t\tif (inputId === action.inputId) {\n\t\t\t\t\tformIsValid = formIsValid && action.isValid;\n\t\t\t\t} else {\n\t\t\t\t\tformIsValid = formIsValid && state.inputs[inputId].isValid;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tinputs: {\n\t\t\t\t\t...state.inputs,\n\t\t\t\t\t[action.inputId]: { value: action.value, isValid: action.isValid }\n\t\t\t\t},\n\t\t\t\tisValid: formIsValid\n\t\t\t};\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport const useFrom = (initialInputs, initialFormValidity)=>{\n    const [ formState, dispatch ] = useReducer(formReducer, {\n\t\tinputs: initialInputs ,\n\t\tisValid: initialFormValidity\n    });\n    \n    const inputHandler = useCallback((id, value, isValid) => {\n\t\tdispatch({\n\t\t\ttype: 'INPUT_CHANGE',\n\t\t\tvalue,\n\t\t\tisValid,\n\t\t\tinputId: id\n\t\t});\n    }, []);\n    \n    const setFromDate = useCallback((id, inputData , fromValidity) =>{\n        dispatch({\n            type: 'SET_DATA',\n            inputs: inputData,\n            formIsValid: fromValidity\n        })\n    }, [])\n    return [ formState , inputHandler, setFromDate ];\n\n}"]},"metadata":{},"sourceType":"module"}