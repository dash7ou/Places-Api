{"ast":null,"code":"var _jsxFileName = \"/home/error/Desktop/React-Projects/place-api/frontend/src/user/pages/User.js\";\nimport React, { useEffect, useState, Fragment } from \"react\";\nimport UserList from \"../components/UserList\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport Spinner from \"../../shared/components/UIElements/LoadingSpinner\";\n\nconst User = () => {\n  const [isLoading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [loadingUsers, setLoadingUsers] = useState();\n  useEffect(() => {\n    const sendRequest = async () => {\n      try {\n        setLoading(true);\n        const response = await fetch(\"http://localhost:5000/api/v1/users\");\n        const data = await response.json();\n        setLoadingUsers(data);\n      } catch (err) {\n        setError(err);\n      }\n\n      setLoading(false);\n    };\n\n    sendRequest();\n  }, []);\n\n  const errorHandler = () => {\n    setError(false);\n  };\n\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, React.createElement(ErrorModal, {\n    error: error,\n    onClear: errorHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }), isLoading && React.createElement(\"div\", {\n    className: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(Spinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  })), React.createElement(UserList, {\n    items: loadingUsers,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }));\n};\n\nexport default User;","map":{"version":3,"sources":["/home/error/Desktop/React-Projects/place-api/frontend/src/user/pages/User.js"],"names":["React","useEffect","useState","Fragment","UserList","ErrorModal","Spinner","User","isLoading","setLoading","error","setError","loadingUsers","setLoadingUsers","sendRequest","response","fetch","data","json","err","errorHandler"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA4BC,QAA5B,EAAsCC,QAAtC,QAAqD,OAArD;AAEA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,UAAP,MAAuB,+CAAvB;AACA,OAAOC,OAAP,MAAoB,mDAApB;;AAEA,MAAMC,IAAI,GAAG,MAAI;AACb,QAAM,CAACC,SAAD,EAAaC,UAAb,IAA2BP,QAAQ,CAAC,KAAD,CAAzC;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACU,YAAD,EAAgBC,eAAhB,IAAmCX,QAAQ,EAAjD;AACAD,EAAAA,SAAS,CAAC,MAAI;AACV,UAAMa,WAAW,GAAG,YAAU;AAC1B,UAAG;AACCL,QAAAA,UAAU,CAAC,IAAD,CAAV;AACA,cAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAD,CAA5B;AACA,cAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACAL,QAAAA,eAAe,CAACI,IAAD,CAAf;AACH,OALD,CAKC,OAAME,GAAN,EAAU;AACPR,QAAAA,QAAQ,CAACQ,GAAD,CAAR;AACH;;AACDV,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KAVD;;AAWAK,IAAAA,WAAW;AACd,GAbQ,EAaN,EAbM,CAAT;;AAeA,QAAMM,YAAY,GAAG,MAAI;AACrBT,IAAAA,QAAQ,CAAC,KAAD,CAAR;AACH,GAFD;;AAGA,SACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAED,KAAnB;AAA0B,IAAA,OAAO,EAAEU,YAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEKZ,SAAS,IAAI;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACV,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADU,CAFlB,EAKI,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAEI,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALJ,CADJ;AAUH,CAhCD;;AAkCA,eAAeL,IAAf","sourcesContent":["import React, { useEffect , useState, Fragment} from \"react\";\n\nimport UserList from \"../components/UserList\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\"\nimport Spinner from \"../../shared/components/UIElements/LoadingSpinner\";\n\nconst User = ()=>{\n    const [isLoading , setLoading] = useState(false);\n    const [error, setError] = useState(null);\n    const [loadingUsers , setLoadingUsers] = useState()\n    useEffect(()=>{\n        const sendRequest = async ()=>{\n            try{\n                setLoading(true);\n                const response = await fetch(\"http://localhost:5000/api/v1/users\");\n                const data = await response.json();\n                setLoadingUsers(data)\n            }catch(err){\n                setError(err)\n            }\n            setLoading(false);\n        }\n        sendRequest()\n    }, [])\n\n    const errorHandler = ()=>{\n        setError(false)\n    }\n    return(\n        <Fragment>\n            <ErrorModal error={error} onClear={errorHandler} />\n            {isLoading && <div className=\"center\">\n                <Spinner />\n            </div>}\n            <UserList items={loadingUsers}/>\n\n        </Fragment>\n    )\n}\n\nexport default User;"]},"metadata":{},"sourceType":"module"}