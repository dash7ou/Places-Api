{"ast":null,"code":"var _jsxFileName = \"/home/error/Desktop/React-Projects/place-api/frontend/src/user/pages/Auth.js\";\nimport React, { useState, useContext, Fragment } from \"react\";\nimport Card from \"../../shared/components/UIElements/Card\";\nimport Input from \"../../shared/components/FormElements/Input\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport { useFrom } from \"../../shared/hooks/form-hook\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport ImageUpload from \"../../shared/components/FormElements/ImageUpload\";\nimport { VALIDATOR_EMAIL, VALIDATOR_MINLENGTH, VALIDATOR_REQUIRE } from \"../../shared/utils/validators\";\nimport \"./Auth.css\";\n\nconst Auth = () => {\n  const {\n    login\n  } = useContext(AuthContext);\n  const [isLoginMode, setIsLoginMode] = useState(true);\n  const [isLoading, error, sendRequest, clearError] = useHttpClient();\n  const [formState, inputHandler, setDateForm] = useFrom({\n    email: {\n      value: \"\",\n      isValid: false\n    },\n    password: {\n      value: \"\",\n      isValid: false\n    }\n  }, false);\n\n  const onSwitchHandler = event => {\n    event.preventDefault();\n\n    if (!isLoginMode) {\n      setDateForm({ ...formState.inputs,\n        name: undefined,\n        image: undefined\n      }, formState.inputs.email.isValid && formState.inputs.password.isValid);\n    } else {\n      setDateForm({ ...formState.inputs,\n        name: {\n          value: \"\",\n          isValid: false\n        },\n        image: {\n          value: null,\n          isValid: false\n        }\n      }, false);\n    }\n\n    setIsLoginMode(prevMode => !prevMode);\n  };\n\n  const onSubmitForm = async event => {\n    event.preventDefault();\n\n    if (isLoginMode) {\n      try {\n        const data = await sendRequest(\"http://localhost:5000/api/v1/users/login\", \"POST\", JSON.stringify({\n          email: formState.inputs.email.value,\n          password: formState.inputs.password.value\n        }), {\n          \"Content-Type\": \"application/json\"\n        });\n        login(data._id.toString());\n      } catch (err) {}\n    } else {\n      try {\n        const data = await sendRequest(\"http://localhost:5000/api/v1/users/signup\", \"POST\", JSON.stringify({\n          name: formState.inputs.name.value,\n          email: formState.inputs.email.value,\n          password: formState.inputs.password.value\n        }), {\n          \"Content-Type\": \"application/json\"\n        });\n        login(data._id.toString());\n      } catch (err) {}\n    }\n  };\n\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, React.createElement(ErrorModal, {\n    error: error,\n    onClear: clearError,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }), React.createElement(Card, {\n    className: \"authentication\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, isLoading && React.createElement(LoadingSpinner, {\n    asOverlay: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }), React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, \"Login Required\"), React.createElement(\"hr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }), React.createElement(\"form\", {\n    onSubmit: event => onSubmitForm(event),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, !isLoginMode && React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(Input, {\n    element: \"input\",\n    id: \"name\",\n    type: \"text\",\n    label: \"Name\",\n    validators: [VALIDATOR_REQUIRE()],\n    errorText: \"Please enter a valid name\",\n    onInput: inputHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }), React.createElement(ImageUpload, {\n    id: \"image\",\n    center: true,\n    onInput: inputHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  })), React.createElement(Input, {\n    id: \"email\",\n    element: \"input\",\n    type: \"email\",\n    label: \"E-mail\",\n    validators: [VALIDATOR_EMAIL()],\n    errorText: \"Please enter a valid email address.\",\n    onInput: inputHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }), React.createElement(Input, {\n    id: \"password\",\n    element: \"input\",\n    type: \"password\",\n    label: \"Password\",\n    validators: [VALIDATOR_MINLENGTH(6)],\n    errorText: \"Please enter a valid password at least 6 characters.\",\n    onInput: inputHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }), React.createElement(Button, {\n    type: \"submit\",\n    disabled: !formState.isValid,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, isLoginMode ? \"Login\" : \"SignUp\"), React.createElement(Button, {\n    inverse: true,\n    onClick: onSwitchHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, \"Switch To \", isLoginMode ? \"SignUp\" : \"Login\"))));\n};\n\nexport default Auth;","map":{"version":3,"sources":["/home/error/Desktop/React-Projects/place-api/frontend/src/user/pages/Auth.js"],"names":["React","useState","useContext","Fragment","Card","Input","Button","useFrom","AuthContext","useHttpClient","ErrorModal","LoadingSpinner","ImageUpload","VALIDATOR_EMAIL","VALIDATOR_MINLENGTH","VALIDATOR_REQUIRE","Auth","login","isLoginMode","setIsLoginMode","isLoading","error","sendRequest","clearError","formState","inputHandler","setDateForm","email","value","isValid","password","onSwitchHandler","event","preventDefault","inputs","name","undefined","image","prevMode","onSubmitForm","data","JSON","stringify","_id","toString","err"],"mappings":"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","sourcesContent":["import React, {useState, useContext, Fragment} from \"react\";\n\nimport Card from \"../../shared/components/UIElements/Card\";\nimport Input from \"../../shared/components/FormElements/Input\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport { useFrom } from \"../../shared/hooks/form-hook\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\"\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport ImageUpload from \"../../shared/components/FormElements/ImageUpload\";\n\nimport {\n    VALIDATOR_EMAIL,\n    VALIDATOR_MINLENGTH,\n    VALIDATOR_REQUIRE\n} from \"../../shared/utils/validators\";\n\nimport \"./Auth.css\"\n\nconst Auth = ()=>{\n    const { login } = useContext(AuthContext);\n    const [ isLoginMode, setIsLoginMode ] = useState(true);\n    const [ isLoading , error, sendRequest, clearError ] = useHttpClient()\n\n    const [ formState , inputHandler, setDateForm ] = useFrom({\n        email: {\n            value: \"\",\n            isValid: false,\n        },\n        password: {\n            value: \"\",\n            isValid: false\n        }\n    }, false);\n\n\n    const onSwitchHandler = (event)=>{\n        event.preventDefault();\n        if(!isLoginMode){\n            setDateForm({\n                ...formState.inputs,\n                name: undefined,\n                image: undefined,\n            }, formState.inputs.email.isValid && formState.inputs.password.isValid)\n        }else{\n            setDateForm({\n                ...formState.inputs,\n                name: {\n                    value: \"\",\n                    isValid: false\n                },\n                image: {\n                    value: null,\n                    isValid: false\n                }\n            }, false)\n        }\n        setIsLoginMode(prevMode => !prevMode)\n    }\n\n    const onSubmitForm = async (event)=>{\n        event.preventDefault();\n        if(isLoginMode){\n            try{\n                const data = await sendRequest(\"http://localhost:5000/api/v1/users/login\", \"POST\",JSON.stringify({\n                    email: formState.inputs.email.value,\n                    password: formState.inputs.password.value\n                }),\n                {\n                    \"Content-Type\": \"application/json\"\n                })\n                login(data._id.toString())\n            }catch(err){}\n        }else{\n            try{\n                const data = await sendRequest(\"http://localhost:5000/api/v1/users/signup\", \"POST\",JSON.stringify({\n                    name: formState.inputs.name.value,\n                    email: formState.inputs.email.value,\n                    password: formState.inputs.password.value\n                }),{\n                    \"Content-Type\": \"application/json\"\n                })\n                login(data._id.toString())\n            }catch(err){}\n        }\n    }\n\n    return (\n        <Fragment>\n        <ErrorModal error={error} onClear={clearError}/>\n        <Card className=\"authentication\">\n            {isLoading && <LoadingSpinner asOverlay/>}\n            <h2>Login Required</h2>\n            <hr/>\n            <form onSubmit={(event)=>onSubmitForm(event)}>\n                {\n                    !isLoginMode &&<Fragment> \n                    <Input \n                        element=\"input\"\n                        id=\"name\"\n                        type=\"text\"\n                        label=\"Name\"\n                        validators={[VALIDATOR_REQUIRE()]}\n                        errorText=\"Please enter a valid name\"\n                        onInput={inputHandler}\n                    />\n                    <ImageUpload id=\"image\" center onInput={inputHandler}/>\n                    </Fragment>\n                }\n                <Input \n                    id=\"email\"\n                    element=\"input\"\n                    type=\"email\"\n                    label=\"E-mail\"\n                    validators={[VALIDATOR_EMAIL()]}\n                    errorText=\"Please enter a valid email address.\"\n                    onInput={inputHandler}\n                />\n                <Input \n                    id=\"password\"\n                    element=\"input\"\n                    type=\"password\"\n                    label=\"Password\"\n                    validators={[VALIDATOR_MINLENGTH(6)]}\n                    errorText=\"Please enter a valid password at least 6 characters.\"\n                    onInput={inputHandler}\n                />\n                <Button type=\"submit\" disabled={!formState.isValid}>{ isLoginMode ? \"Login\" : \"SignUp\" }</Button>\n                <Button inverse onClick={onSwitchHandler}>Switch To { isLoginMode ? \"SignUp\" : \"Login\" }</Button>\n            </form>\n        </Card>\n        </Fragment>\n    )\n}\n\n\nexport default Auth;"]},"metadata":{},"sourceType":"module"}