{"ast":null,"code":"var _jsxFileName = \"/home/error/Desktop/React-Projects/place-api/frontend/src/places/pages/UserPlaces.js\";\nimport React, { useEffect, useState, Fragment } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport PlaceList from \"../components/PlacesList\";\nimport Spinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\n\nconst UserPlaces = () => {\n  const userId = useParams().userId;\n  const [isLoading, error, sendRequest, clearError] = useHttpClient();\n  const [places, setPlaces] = useState(null);\n  console.log(userId);\n  useEffect(() => {\n    const getPlaces = async () => {\n      try {\n        const data = await sendRequest(`http://localhost:5000/api/v1/places/user/${userId}`);\n        setPlaces(data);\n      } catch (err) {}\n    };\n\n    getPlaces();\n  }, []);\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, React.createElement(ErrorModal, {\n    error: error,\n    onClear: clearError,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }), isLoading && React.createElement(Spinner, {\n    asOverlay: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }), places && React.createElement(PlaceList, {\n    items: places,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }));\n};\n\nexport default UserPlaces;","map":{"version":3,"sources":["/home/error/Desktop/React-Projects/place-api/frontend/src/places/pages/UserPlaces.js"],"names":["React","useEffect","useState","Fragment","useParams","PlaceList","Spinner","ErrorModal","useHttpClient","UserPlaces","userId","isLoading","error","sendRequest","clearError","places","setPlaces","console","log","getPlaces","data","err"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,QAArC,QAAqD,OAArD;AACA,SAASC,SAAT,QAA0B,kBAA1B;AAEA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,OAAOC,OAAP,MAAoB,mDAApB;AACA,OAAOC,UAAP,MAAuB,+CAAvB;AACA,SAASC,aAAT,QAA8B,8BAA9B;;AAEA,MAAMC,UAAU,GAAG,MAAI;AACrB,QAAMC,MAAM,GAAGN,SAAS,GAAGM,MAA3B;AACA,QAAM,CAAEC,SAAF,EAAcC,KAAd,EAAqBC,WAArB,EAAmCC,UAAnC,IAAiDN,aAAa,EAApE;AACA,QAAM,CAACO,MAAD,EAAUC,SAAV,IAAuBd,QAAQ,CAAC,IAAD,CAArC;AACAe,EAAAA,OAAO,CAACC,GAAR,CAAYR,MAAZ;AAEAT,EAAAA,SAAS,CAAC,MAAI;AACZ,UAAMkB,SAAS,GAAG,YAAU;AAC1B,UAAG;AACD,cAAMC,IAAI,GAAG,MAAMP,WAAW,CAAE,4CAA2CH,MAAO,EAApD,CAA9B;AACAM,QAAAA,SAAS,CAACI,IAAD,CAAT;AACD,OAHD,CAGC,OAAMC,GAAN,EAAU,CAAE;AACd,KALD;;AAOAF,IAAAA,SAAS;AACV,GATQ,EASP,EATO,CAAT;AAWA,SACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAEP,KAAnB;AAA0B,IAAA,OAAO,EAAEE,UAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEGH,SAAS,IAAI,oBAAC,OAAD;AAAS,IAAA,SAAS,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFhB,EAGGI,MAAM,IAAI,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAEA,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHb,CADF;AAOD,CAxBD;;AA2BA,eAAeN,UAAf","sourcesContent":["import React, { useEffect, useState, Fragment } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nimport PlaceList from \"../components/PlacesList\";\nimport Spinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\"\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\n\nconst UserPlaces = ()=>{\n  const userId = useParams().userId;\n  const [ isLoading , error, sendRequest , clearError] = useHttpClient();\n  const [places , setPlaces] = useState(null);\n  console.log(userId)\n\n  useEffect(()=>{\n    const getPlaces = async ()=>{\n      try{\n        const data = await sendRequest(`http://localhost:5000/api/v1/places/user/${userId}`);\n        setPlaces(data)\n      }catch(err){}\n    }\n\n    getPlaces();\n  },[])\n\n  return (\n    <Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      {isLoading && <Spinner asOverlay/>}\n      {places && <PlaceList items={places}/>}\n    </Fragment>\n  )\n}\n\n\nexport default UserPlaces;"]},"metadata":{},"sourceType":"module"}